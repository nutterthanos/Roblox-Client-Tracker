local Plugin = script.Parent.Parent.Parent

local Framework = require(Plugin.Packages.Framework)

local MockPlugin = Framework.TestHelpers.Instances.MockPlugin

local TerrainEnums = require(Plugin.Src.Util.TerrainEnums)
local ToolId = TerrainEnums.ToolId

local PluginActivationController = require(script.Parent.PluginActivationController)

return function()
	it("should be creatable", function()
		expect(PluginActivationController.new(MockPlugin.new())).to.be.ok()
	end)

	it("should require a plugin instance", function()
		expect(function()
			PluginActivationController.new(nil)
		end).to.throw()
	end)

	describe("activateTool", function()
		it("should set activeTool and selectedTool", function()
			local pac = PluginActivationController.new(MockPlugin.new())
			expect(pac._activeTool).to.equal(ToolId.None)
			expect(pac._selectedTool).to.equal(ToolId.None)
			pac:activateTool(ToolId.Add)
			expect(pac._activeTool).to.equal(ToolId.Add)
			expect(pac._selectedTool).to.equal(ToolId.Add)
		end)

		it("should activate the plugin for some tools", function()
			local plugin = MockPlugin.new()
			local pac = PluginActivationController.new(plugin)
			expect(plugin._activated).to.equal(false)
			pac:activateTool(ToolId.Add)
			expect(plugin._activated).to.equal(true)
		end)

		it("should not activate the plugin for some tools", function()
			local plugin = MockPlugin.new()
			local pac = PluginActivationController.new(plugin)
			expect(plugin._activated).to.equal(false)
			pac:activateTool(ToolId.Clear)
			expect(plugin._activated).to.equal(false)
		end)
	end)

	describe("deactivateTool", function()
		it("should clear activeTool but not selectedTool", function()
			local pac = PluginActivationController.new(MockPlugin.new())
			pac:activateTool(ToolId.Add)
			pac:deactivateTool()
			expect(pac._activeTool).to.equal(ToolId.None)
			expect(pac._selectedTool).to.equal(ToolId.Add)
		end)

		it("should deactivate the plugin", function()
			local plugin = MockPlugin.new()
			local pac = PluginActivationController.new(plugin)
			pac:activateTool(ToolId.Add)
			pac:deactivateTool()
			expect(plugin._activated).to.equal(false)
		end)
	end)

	describe("deselectTool", function()
		it("should clear activeTool and selectedTool", function()
			local pac = PluginActivationController.new(MockPlugin.new())
			pac:activateTool(ToolId.Add)
			pac:deselectTool()
			expect(pac._activeTool).to.equal(ToolId.None)
			expect(pac._selectedTool).to.equal(ToolId.None)
		end)

		it("should deactivate the plugin", function()
			local plugin = MockPlugin.new()
			local pac = PluginActivationController.new(plugin)
			pac:activateTool(ToolId.Add)
			pac:deselectTool()
			expect(plugin._activated).to.equal(false)
		end)
	end)

	describe("pauseActivatedTool", function()
		it("should set selectedTool and clear activeTool", function()
			local pac = PluginActivationController.new(MockPlugin.new())
			pac:activateTool(ToolId.Add)
			pac:pauseActivatedTool()
			expect(pac._activeTool).to.equal(ToolId.None)
			expect(pac._selectedTool).to.equal(ToolId.Add)
		end)
	end)

	describe("restoreSelectedTool", function()
		it("should restore the selected tool", function()
			local pac = PluginActivationController.new(MockPlugin.new())
			pac:activateTool(ToolId.Add)
			pac:pauseActivatedTool()
			pac:restoreSelectedTool()
			expect(pac._activeTool).to.equal(ToolId.Add)
			expect(pac._selectedTool).to.equal(ToolId.Add)
		end)
	end)

	describe("onPluginDeactivation", function()
		it("should do nothing if no tool is active", function()
			local plugin = MockPlugin.new()
			local pac = PluginActivationController.new(plugin)
			plugin:Deactivate()
			expect(pac._activeTool).to.equal(ToolId.None)
			expect(pac._selectedTool).to.equal(ToolId.None)
		end)

		it("should pause the current tool", function()
			local plugin = MockPlugin.new()
			local pac = PluginActivationController.new(plugin)
			pac:activateTool(ToolId.Add)
			plugin:Deactivate()
			expect(pac._activeTool).to.equal(ToolId.None)
			expect(pac._selectedTool).to.equal(ToolId.Add)
		end)
	end)

	describe("destroy", function()
		it("should clear activeTool and selectedTool", function()
			local pac = PluginActivationController.new(MockPlugin.new())
			pac:activateTool(ToolId.Add)
			pac:destroy()
			expect(pac._activeTool).to.equal(ToolId.None)
			expect(pac._selectedTool).to.equal(ToolId.None)
		end)

		it("should deactivate the plugin", function()
			local plugin = MockPlugin.new()
			local pac = PluginActivationController.new(plugin)
			pac:activateTool(ToolId.Add)
			pac:destroy()
			expect(plugin._activated).to.equal(false)
		end)
	end)
end
